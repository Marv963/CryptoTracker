---
version: "3.8"

x-common-environment: &common_environment
  - INFLUXDB_PORT=${INFLUXDB_PORT}
  - INFLUXDB_USERNAME=${INFLUXDB_USERNAME}
  - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD}
  - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
  - REDIS_PASSWORD=${REDIS_PASSWORD}
  - REDIS_HOST=${REDIS_HOST}
  - REDIS_PORT=${REDIS_PORT}
  - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
  - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
  - RABBITMQ_HOST=${RABBITMQ_HOST}
  - RABBITMQ_PORT=${RABBITMQ_PORT}
  - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
  - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE}

services:
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: always
    ports:
      - ${INFLUXDB_PORT}:8086
    volumes:
      - $PWD/infrastructre/docker/db/influxdb/:/etc/influxdb2
      - influxdb:/var/lib/influxdb2
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - cryptoTracker

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    networks:
      - cryptoTracker
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq:/var/lib/rabbitmq/
      - $PWD/rabbitmq/log/:/var/log/rabbitmq
    ports:
      - ${RABBITMQ_PORT}:5672
      - 127.0.0.1:15672:15672
    networks:
      - cryptoTracker

  api-service:
    container_name: api-service
    restart: always
    networks:
      - cryptoTracker
    build:
      context: .
      dockerfile: Dockerfile
      target: api-runner
    volumes:
      - type: bind
        source: ./config.yaml
        target: /config.yaml
    ports:
      - "3003:3003"
    depends_on:
      - influxdb
      - redis
      - rabbitmq
    environment: *common_environment

  refresher-service:
    container_name: refresher-service
    restart: always
    networks:
      - cryptoTracker
    build:
      context: .
      dockerfile: Dockerfile
      target: refresher-runner
    volumes:
      - type: bind
        source: ./config.yaml
        target: /config.yaml
    depends_on:
      - influxdb
      - redis
      - rabbitmq
      - storage-service
    environment: *common_environment

  storage-service:
    container_name: storage-service
    restart: always
    networks:
      - cryptoTracker
    build:
      context: .
      dockerfile: Dockerfile
      target: storage-runner
    volumes:
      - type: bind
        source: ./config.yaml
        target: /config.yaml
    environment: *common_environment
    depends_on:
      - influxdb
      - redis
      - rabbitmq

  websocket-service:
    container_name: websocket-service
    restart: always
    networks:
      - cryptoTracker
    build:
      context: .
      dockerfile: Dockerfile
      target: websocket-runner
    volumes:
      - type: bind
        source: ./config.yaml
        target: /config.yaml
    ports:
      - "3008:3008"
    environment: *common_environment
    depends_on:
      - influxdb
      - redis
      - rabbitmq

  web-service:
    container_name: web-service
    image: nextapp:latest
    restart: always
    build:
      context: ./web
      dockerfile: Dockerfile
      shm_size: "2gb"
    networks:
      - cryptoTracker
    ports:
      - "3000:3000"
    environment: *common_environment
    depends_on:
      - api-service

  stream-app-bitstamp:
    build: ./services/
    container_name: stream_bitstamp
    networks:
      - cryptoTracker
    environment: *common_environment
    restart: always
    depends_on:
      - rabbitmq
    command: bitstamp

  stream-app-kraken:
    build: ./services/
    container_name: stream_kraken
    networks:
      - cryptoTracker
    restart: always
    environment: *common_environment
    depends_on:
      - rabbitmq
    command: kraken

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/:/etc/nginx/conf.d/
    depends_on:
      - api-service
      - web-service
      - websocket-service
    networks:
      - cryptoTracker

volumes:
  influxdb:
    external: false
  redis:
    external: false
  rabbitmq:
    external: false

networks:
  cryptoTracker:
    driver: bridge
